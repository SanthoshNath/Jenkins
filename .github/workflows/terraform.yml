name: Terraform

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - ".github/**.yml"
      - "!.github/workflows/terraform.yml"
      - "**.md"
      - ".gitignore"
  pull_request:
    branches:
      - "master"
    paths-ignore:
      - ".github/**.yml"
      - "!.github/workflows/terraform.yml"
      - "**.md"
      - ".gitignore"

concurrency: ${{ github.ref }}

jobs:
  Plan:
    runs-on: ubuntu-latest
    env:
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}

    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          if [[ ${{ github.event_name }} == pull_request ]]
          then
            terraform plan -input=false -no-color
          else
            terraform plan -input=false
          fi

      - uses: actions/github-script@v6
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ github.token }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Cache repository
        uses: actions/cache@v3
        with:
          path: |
            .terraform/
            .terraform.lock.hcl
          key: ${{ github.repository }}-${{ github.sha }}-${{ runner.os }}
        continue-on-error: true

  Apply:
    runs-on: ubuntu-latest
    environment:
      name: Jenkins
      url: ${{ steps.output.outputs.stdout }}
    needs: Plan
    env:
      TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Terraform cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            .terraform/
            .terraform.lock.hcl
          key: ${{ github.repository }}-${{ github.sha }}-${{ runner.os }}
        continue-on-error: true

      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        if: steps.cache.outputs.cache-hit != 'true'
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Terraform Output
        id: output
        run: terraform output -raw jenkins_url

  Cleanup:
    runs-on: ubuntu-latest
    needs: Apply
    if: always()

    steps:
      - name: Delete cache
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/caches?key=${{ github.repository }}-${{ github.sha }}-${{ runner.os }}
        continue-on-error: true
